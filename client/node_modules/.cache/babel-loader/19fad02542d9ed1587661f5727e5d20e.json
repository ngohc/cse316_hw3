{"ast":null,"code":"var _s = $RefreshSig$();\nimport { createContext, StrictMode, useState } from 'react';\nimport jsTPS from '../common/jsTPS';\nimport api from '../api';\nimport CreateSong_Transaction from '../transactions/CreateSong_Transaction';\nexport const GlobalStoreContext = /*#__PURE__*/createContext({});\n/*\n    This is our global data store. Note that it uses the Flux design pattern,\n    which makes use of things like actions and reducers. \n    \n    @author McKilla Gorilla\n*/\n\n// THESE ARE ALL THE TYPES OF UPDATES TO OUR GLOBAL\n// DATA STORE STATE THAT CAN BE PROCESSED\nexport const GlobalStoreActionType = {\n  CHANGE_LIST_NAME: \"CHANGE_LIST_NAME\",\n  CLOSE_CURRENT_LIST: \"CLOSE_CURRENT_LIST\",\n  CREATE_NEW_LIST: \"CREATE_NEW_LIST\",\n  LOAD_ID_NAME_PAIRS: \"LOAD_ID_NAME_PAIRS\",\n  SET_CURRENT_LIST: \"SET_CURRENT_LIST\",\n  SET_LIST_NAME_EDIT_ACTIVE: \"SET_LIST_NAME_EDIT_ACTIVE\",\n  MARK_LIST_FOR_DELETION: \"MARK_LIST_FOR_DELETION\",\n  MARK_SONG_FOR_REMOVAL: \"MARK_SONG_FOR_DELETION\"\n};\n\n// WE'LL NEED THIS TO PROCESS TRANSACTIONS\nconst tps = new jsTPS();\n\n// WITH THIS WE'RE MAKING OUR GLOBAL DATA STORE\n// AVAILABLE TO THE REST OF THE APPLICATION\nexport const useGlobalStore = () => {\n  _s();\n  // THESE ARE ALL THE THINGS OUR DATA STORE WILL MANAGE\n  const [store, setStore] = useState({\n    idNamePairs: [],\n    currentList: null,\n    newListCounter: 0,\n    listNameActive: false,\n    listMarkedForDeletion: null\n  });\n\n  // HERE'S THE DATA STORE'S REDUCER, IT MUST\n  // HANDLE EVERY TYPE OF STATE CHANGE\n  const storeReducer = action => {\n    const {\n      type,\n      payload\n    } = action;\n    switch (type) {\n      // LIST UPDATE OF ITS NAME\n      case GlobalStoreActionType.CHANGE_LIST_NAME:\n        {\n          return setStore({\n            idNamePairs: payload.idNamePairs,\n            currentList: payload.playlist,\n            newListCounter: store.newListCounter,\n            listNameActive: false,\n            listMarkedForDeletion: null\n          });\n        }\n      // STOP EDITING THE CURRENT LIST\n      case GlobalStoreActionType.CLOSE_CURRENT_LIST:\n        {\n          return setStore({\n            idNamePairs: store.idNamePairs,\n            currentList: null,\n            newListCounter: store.newListCounter,\n            listNameActive: false,\n            listMarkedForDeletion: null\n          });\n        }\n      // CREATE A NEW LIST\n      case GlobalStoreActionType.CREATE_NEW_LIST:\n        {\n          return setStore({\n            idNamePairs: store.idNamePairs,\n            currentList: payload,\n            newListCounter: store.newListCounter + 1,\n            listNameActive: false,\n            listMarkedForDeletion: null\n          });\n        }\n      // GET ALL THE LISTS SO WE CAN PRESENT THEM\n      case GlobalStoreActionType.LOAD_ID_NAME_PAIRS:\n        {\n          return setStore({\n            idNamePairs: payload,\n            currentList: null,\n            newListCounter: store.newListCounter,\n            listNameActive: false,\n            listMarkedForDeletion: null\n          });\n        }\n      // PREPARE TO DELETE A LIST\n      case GlobalStoreActionType.MARK_LIST_FOR_DELETION:\n        {\n          return setStore({\n            idNamePairs: store.idNamePairs,\n            currentList: null,\n            newListCounter: store.newListCounter,\n            listNameActive: false,\n            listMarkedForDeletion: payload\n          });\n        }\n      // PREPARE TO REMOVE A SONG\n      case GlobalStoreActionType.MARK_SONG_FOR_REMOVAL:\n        {\n          return setStore({\n            idNamePairs: store.idNamePairs,\n            currentList: store.currentList,\n            newListCounter: store.newListCounter,\n            listNameActive: false,\n            songMarkedForRemoval: payload\n          });\n        }\n      // UPDATE A LIST\n      case GlobalStoreActionType.SET_CURRENT_LIST:\n        {\n          return setStore({\n            idNamePairs: store.idNamePairs,\n            currentList: payload,\n            newListCounter: store.newListCounter,\n            listNameActive: false,\n            listMarkedForDeletion: null\n          });\n        }\n      // START EDITING A LIST NAME\n      case GlobalStoreActionType.SET_LIST_NAME_EDIT_ACTIVE:\n        {\n          return setStore({\n            idNamePairs: store.idNamePairs,\n            currentList: payload,\n            newListCounter: store.newListCounter,\n            listNameActive: true,\n            listMarkedForDeletion: null\n          });\n        }\n      default:\n        return store;\n    }\n  };\n  // THESE ARE THE FUNCTIONS THAT WILL UPDATE OUR STORE AND\n  // DRIVE THE STATE OF THE APPLICATION. WE'LL CALL THESE IN \n  // RESPONSE TO EVENTS INSIDE OUR COMPONENTS.\n\n  store.createNewList = function () {\n    async function asyncCreateNewList() {\n      let playlistName = \"Untitled\" + store.newListCounter;\n      let newPlaylistObj = {\n        name: playlistName,\n        song: []\n      };\n      let response = await api.createPlaylist(newPlaylistObj);\n      if (response.data.success) {\n        let newPlaylist = response.data.playlist;\n        storeReducer({\n          type: GlobalStoreActionType.CREATE_NEW_LIST,\n          payload: newPlaylist\n        });\n        store.history.push(\"/playlist/\" + newPlaylist._id);\n      } else {\n        console.log(\"Could not create a new list\");\n      }\n    }\n    asyncCreateNewList();\n  };\n\n  // 1. mark list for deletion (NO DELETION YET)\n  store.markListForDeletion = function (id) {\n    storeReducer({\n      type: GlobalStoreActionType.MARK_LIST_FOR_DELETION,\n      payload: id\n    });\n    store.showDeleteListModal();\n  };\n\n  // 2. begins process of deleting marked list (NO DELETION YET)\n  store.deleteMarkedList = function () {\n    store.deletePlaylist(store.listMarkedForDeletion);\n    store.hideDeleteListModal();\n  };\n\n  // 3. actually deletes the list\n  store.deletePlaylist = function (id) {\n    async function asyncDeleteList(id) {\n      let response = await api.deletePlaylistById(id);\n      if (response.data.success) {\n        store.loadIdNamePairs();\n        store.history.push(\"/\");\n      } else {\n        console.log(\"No response. Did not delete list\");\n      }\n    }\n    asyncDeleteList(id);\n  };\n  store.showDeleteListModal = function () {\n    let deleteListModal = document.getElementById(\"delete-list-modal\");\n    deleteListModal.classList.add(\"is-visible\");\n  };\n  store.hideDeleteListModal = function () {\n    let deleteListModal = document.getElementById(\"delete-list-modal\");\n    deleteListModal.classList.remove(\"is-visible\");\n  };\n\n  // THIS FUNCTION PROCESSES CHANGING A LIST NAME\n  store.changeListName = function (id, newName) {\n    // GET THE LIST\n    async function asyncChangeListName(id) {\n      let response = await api.getPlaylistById(id);\n      if (response.data.success) {\n        let playlist = response.data.playlist;\n        playlist.name = newName;\n        async function updateList(playlist) {\n          response = await api.updatePlaylistById(playlist._id, playlist);\n          if (response.data.success) {\n            async function getListPairs(playlist) {\n              response = await api.getPlaylistPairs();\n              if (response.data.success) {\n                let pairsArray = response.data.idNamePairs;\n                storeReducer({\n                  type: GlobalStoreActionType.CHANGE_LIST_NAME,\n                  payload: {\n                    idNamePairs: pairsArray,\n                    playlist: playlist\n                  }\n                });\n              }\n            }\n            getListPairs(playlist);\n          }\n        }\n        updateList(playlist);\n      }\n    }\n    asyncChangeListName(id);\n  };\n\n  // THIS FUNCTION PROCESSES CLOSING THE CURRENTLY LOADED LIST\n  store.closeCurrentList = function () {\n    storeReducer({\n      type: GlobalStoreActionType.CLOSE_CURRENT_LIST,\n      payload: {}\n    });\n  };\n\n  // THIS FUNCTION LOADS ALL THE ID, NAME PAIRS SO WE CAN LIST ALL THE LISTS\n  store.loadIdNamePairs = function () {\n    async function asyncLoadIdNamePairs() {\n      const response = await api.getPlaylistPairs();\n      if (response.data.success) {\n        let pairsArray = response.data.idNamePairs;\n        storeReducer({\n          type: GlobalStoreActionType.LOAD_ID_NAME_PAIRS,\n          payload: pairsArray\n        });\n      } else {\n        console.log(\"API FAILED TO GET THE LIST PAIRS\");\n      }\n    }\n    asyncLoadIdNamePairs();\n  };\n  store.setCurrentList = function (id) {\n    async function asyncSetCurrentList(id) {\n      let response = await api.getPlaylistById(id);\n      if (response.data.success) {\n        let playlist = response.data.playlist;\n        if (response.data.success) {\n          storeReducer({\n            type: GlobalStoreActionType.SET_CURRENT_LIST,\n            payload: playlist\n          });\n          store.history.push(\"/playlist/\" + playlist._id);\n        }\n      }\n    }\n    asyncSetCurrentList(id);\n  };\n  store.updateCurrentList = function () {\n    async function asyncUpdateCurrentList() {\n      let response = await api.updatePlaylistById(store.currentList._id, store.currentList);\n      if (response.data.success) {\n        storeReducer({\n          type: GlobalStoreActionType.SET_CURRENT_LIST,\n          payload: store.currentList\n        });\n      }\n    }\n    asyncUpdateCurrentList();\n  };\n  store.getPlaylistSize = function () {\n    console.log(\"size of playlist:\" + store.currentList.songs.length);\n    return store.currentList.songs.length;\n  };\n\n  // 1. inititate adding to the transaction stack\n  store.addNewSong = function () {\n    let index = store.getPlaylistSize();\n    store.addCreateSongTrans(index, \"Untitled\", \"Unknown\", \"dQw4w9WgXcQ\");\n  };\n\n  // 2. adds to transaction stack\n  store.addCreateSongTrans = function (index, title, artist, youTubeId) {\n    let song = {\n      title: title,\n      artist: artist,\n      youTubeId: youTubeId\n    };\n    let transaction = new CreateSong_Transaction(this, index, song);\n    tps.addTransaction(transaction);\n  };\n\n  // 3. actually creates the song and store in backend\n  store.createSong = function (index, song) {\n    store.currentList.songs[index] = song;\n    store.updateCurrentList();\n  };\n  store.removeSong = function (index) {\n    let songArr = store.currentList.songs;\n    song;\n  };\n  store.addRemoveSongTrans = function (index) {};\n  store.undo = function () {\n    tps.undoTransaction();\n  };\n  store.redo = function () {\n    tps.doTransaction();\n  };\n\n  // THIS FUNCTION ENABLES THE PROCESS OF EDITING A LIST NAME\n  store.setlistNameActive = function () {\n    storeReducer({\n      type: GlobalStoreActionType.SET_LIST_NAME_EDIT_ACTIVE,\n      payload: null\n    });\n  };\n\n  // THIS GIVES OUR STORE AND ITS REDUCER TO ANY COMPONENT THAT NEEDS IT\n  return {\n    store,\n    storeReducer\n  };\n};\n_s(useGlobalStore, \"dUUQkwr6iES2jtM/LXizXBXizqo=\");","map":{"version":3,"names":["createContext","StrictMode","useState","jsTPS","api","CreateSong_Transaction","GlobalStoreContext","GlobalStoreActionType","CHANGE_LIST_NAME","CLOSE_CURRENT_LIST","CREATE_NEW_LIST","LOAD_ID_NAME_PAIRS","SET_CURRENT_LIST","SET_LIST_NAME_EDIT_ACTIVE","MARK_LIST_FOR_DELETION","MARK_SONG_FOR_REMOVAL","tps","useGlobalStore","store","setStore","idNamePairs","currentList","newListCounter","listNameActive","listMarkedForDeletion","storeReducer","action","type","payload","playlist","songMarkedForRemoval","createNewList","asyncCreateNewList","playlistName","newPlaylistObj","name","song","response","createPlaylist","data","success","newPlaylist","history","push","_id","console","log","markListForDeletion","id","showDeleteListModal","deleteMarkedList","deletePlaylist","hideDeleteListModal","asyncDeleteList","deletePlaylistById","loadIdNamePairs","deleteListModal","document","getElementById","classList","add","remove","changeListName","newName","asyncChangeListName","getPlaylistById","updateList","updatePlaylistById","getListPairs","getPlaylistPairs","pairsArray","closeCurrentList","asyncLoadIdNamePairs","setCurrentList","asyncSetCurrentList","updateCurrentList","asyncUpdateCurrentList","getPlaylistSize","songs","length","addNewSong","index","addCreateSongTrans","title","artist","youTubeId","transaction","addTransaction","createSong","removeSong","songArr","addRemoveSongTrans","undo","undoTransaction","redo","doTransaction","setlistNameActive"],"sources":["/Users/chantelngoh/CSE316/Playlister_HW3/client/src/store/index.js"],"sourcesContent":["import { createContext, StrictMode, useState } from 'react'\nimport jsTPS from '../common/jsTPS'\nimport api from '../api'\nimport CreateSong_Transaction from '../transactions/CreateSong_Transaction';\nexport const GlobalStoreContext = createContext({});\n/*\n    This is our global data store. Note that it uses the Flux design pattern,\n    which makes use of things like actions and reducers. \n    \n    @author McKilla Gorilla\n*/\n\n// THESE ARE ALL THE TYPES OF UPDATES TO OUR GLOBAL\n// DATA STORE STATE THAT CAN BE PROCESSED\nexport const GlobalStoreActionType = {\n    CHANGE_LIST_NAME: \"CHANGE_LIST_NAME\",\n    CLOSE_CURRENT_LIST: \"CLOSE_CURRENT_LIST\",\n    CREATE_NEW_LIST: \"CREATE_NEW_LIST\",\n    LOAD_ID_NAME_PAIRS: \"LOAD_ID_NAME_PAIRS\",\n    SET_CURRENT_LIST: \"SET_CURRENT_LIST\",\n    SET_LIST_NAME_EDIT_ACTIVE: \"SET_LIST_NAME_EDIT_ACTIVE\",\n    MARK_LIST_FOR_DELETION: \"MARK_LIST_FOR_DELETION\",\n    MARK_SONG_FOR_REMOVAL: \"MARK_SONG_FOR_DELETION\"\n}\n\n// WE'LL NEED THIS TO PROCESS TRANSACTIONS\nconst tps = new jsTPS();\n\n// WITH THIS WE'RE MAKING OUR GLOBAL DATA STORE\n// AVAILABLE TO THE REST OF THE APPLICATION\nexport const useGlobalStore = () => {\n    // THESE ARE ALL THE THINGS OUR DATA STORE WILL MANAGE\n    const [store, setStore] = useState({\n        idNamePairs: [],\n        currentList: null,\n        newListCounter: 0,\n        listNameActive: false,\n        listMarkedForDeletion: null\n    });\n\n    // HERE'S THE DATA STORE'S REDUCER, IT MUST\n    // HANDLE EVERY TYPE OF STATE CHANGE\n    const storeReducer = (action) => {\n        const { type, payload } = action;\n        switch (type) {\n            // LIST UPDATE OF ITS NAME\n            case GlobalStoreActionType.CHANGE_LIST_NAME: {\n                return setStore({\n                    idNamePairs: payload.idNamePairs,\n                    currentList: payload.playlist,\n                    newListCounter: store.newListCounter,\n                    listNameActive: false,\n                    listMarkedForDeletion: null\n                });\n            }\n            // STOP EDITING THE CURRENT LIST\n            case GlobalStoreActionType.CLOSE_CURRENT_LIST: {\n                return setStore({\n                    idNamePairs: store.idNamePairs,\n                    currentList: null,\n                    newListCounter: store.newListCounter,\n                    listNameActive: false,\n                    listMarkedForDeletion: null\n                })\n            }\n            // CREATE A NEW LIST\n            case GlobalStoreActionType.CREATE_NEW_LIST: {\n                return setStore({\n                    idNamePairs: store.idNamePairs,\n                    currentList: payload,\n                    newListCounter: store.newListCounter + 1,\n                    listNameActive: false,\n                    listMarkedForDeletion: null\n                })\n            }\n            // GET ALL THE LISTS SO WE CAN PRESENT THEM\n            case GlobalStoreActionType.LOAD_ID_NAME_PAIRS: {\n                return setStore({\n                    idNamePairs: payload,\n                    currentList: null,\n                    newListCounter: store.newListCounter,\n                    listNameActive: false,\n                    listMarkedForDeletion: null\n                });\n            }\n            // PREPARE TO DELETE A LIST\n            case GlobalStoreActionType.MARK_LIST_FOR_DELETION: {\n                return setStore({\n                    idNamePairs: store.idNamePairs,\n                    currentList: null,\n                    newListCounter: store.newListCounter,\n                    listNameActive: false,\n                    listMarkedForDeletion: payload\n                });\n            }\n            // PREPARE TO REMOVE A SONG\n            case GlobalStoreActionType.MARK_SONG_FOR_REMOVAL: {\n                return setStore({\n                    idNamePairs: store.idNamePairs,\n                    currentList: store.currentList,\n                    newListCounter: store.newListCounter,\n                    listNameActive: false,\n                    songMarkedForRemoval: payload\n                });\n            }\n            // UPDATE A LIST\n            case GlobalStoreActionType.SET_CURRENT_LIST: {\n                return setStore({\n                    idNamePairs: store.idNamePairs,\n                    currentList: payload,\n                    newListCounter: store.newListCounter,\n                    listNameActive: false,\n                    listMarkedForDeletion: null\n                });\n            }\n            // START EDITING A LIST NAME\n            case GlobalStoreActionType.SET_LIST_NAME_EDIT_ACTIVE: {\n                return setStore({\n                    idNamePairs: store.idNamePairs,\n                    currentList: payload,\n                    newListCounter: store.newListCounter,\n                    listNameActive: true,\n                    listMarkedForDeletion: null\n                });\n            }\n            default:\n                return store;\n        }\n    }\n    // THESE ARE THE FUNCTIONS THAT WILL UPDATE OUR STORE AND\n    // DRIVE THE STATE OF THE APPLICATION. WE'LL CALL THESE IN \n    // RESPONSE TO EVENTS INSIDE OUR COMPONENTS.\n\n    store.createNewList = function () {\n        async function asyncCreateNewList() {\n            let playlistName = \"Untitled\" + store.newListCounter;\n            let newPlaylistObj = {name : playlistName, song : []};\n            let response = await api.createPlaylist(newPlaylistObj);\n\n            if (response.data.success) {\n                let newPlaylist = response.data.playlist;\n                storeReducer({ \n                    type: GlobalStoreActionType.CREATE_NEW_LIST,\n                    payload: newPlaylist\n                });\n                store.history.push(\"/playlist/\" + newPlaylist._id);\n            } else {\n                console.log(\"Could not create a new list\")\n            }\n        }\n        asyncCreateNewList();\n    }\n\n    // 1. mark list for deletion (NO DELETION YET)\n    store.markListForDeletion = function (id) {\n        storeReducer({\n            type: GlobalStoreActionType.MARK_LIST_FOR_DELETION,\n            payload: id\n        });\n        store.showDeleteListModal();\n    }\n\n    // 2. begins process of deleting marked list (NO DELETION YET)\n    store.deleteMarkedList = function() {\n        store.deletePlaylist(store.listMarkedForDeletion);\n        store.hideDeleteListModal();\n    }\n\n    // 3. actually deletes the list\n    store.deletePlaylist = function (id) {\n        async function asyncDeleteList(id) {\n            let response = await api.deletePlaylistById(id);\n            \n            if (response.data.success) {\n                store.loadIdNamePairs();\n                store.history.push(\"/\");\n            } else {\n                console.log(\"No response. Did not delete list\")\n            }\n        }\n        asyncDeleteList(id);\n    }\n\n    store.showDeleteListModal = function () {\n        let deleteListModal = document.getElementById(\"delete-list-modal\");\n        deleteListModal.classList.add(\"is-visible\");\n    }\n\n    store.hideDeleteListModal = function() {\n        let deleteListModal = document.getElementById(\"delete-list-modal\");\n        deleteListModal.classList.remove(\"is-visible\");\n    }\n\n    // THIS FUNCTION PROCESSES CHANGING A LIST NAME\n    store.changeListName = function (id, newName) {\n        // GET THE LIST\n        async function asyncChangeListName(id) {\n            let response = await api.getPlaylistById(id);\n            if (response.data.success) {\n                let playlist = response.data.playlist;\n                playlist.name = newName;\n                async function updateList(playlist) {\n                    response = await api.updatePlaylistById(playlist._id, playlist);\n                    if (response.data.success) {\n                        async function getListPairs(playlist) {\n                            response = await api.getPlaylistPairs();\n                            if (response.data.success) {\n                                let pairsArray = response.data.idNamePairs;\n                                storeReducer({\n                                    type: GlobalStoreActionType.CHANGE_LIST_NAME,\n                                    payload: {\n                                        idNamePairs: pairsArray,\n                                        playlist: playlist\n                                    }\n                                });\n                            }\n                        }\n                        getListPairs(playlist);\n                    }\n                }\n                updateList(playlist);\n            }\n        }\n        asyncChangeListName(id);\n    }\n\n    // THIS FUNCTION PROCESSES CLOSING THE CURRENTLY LOADED LIST\n    store.closeCurrentList = function () {\n        storeReducer({\n            type: GlobalStoreActionType.CLOSE_CURRENT_LIST,\n            payload: {}\n        });\n    }\n\n    // THIS FUNCTION LOADS ALL THE ID, NAME PAIRS SO WE CAN LIST ALL THE LISTS\n    store.loadIdNamePairs = function () {\n        async function asyncLoadIdNamePairs() {\n            const response = await api.getPlaylistPairs();\n            if (response.data.success) {\n                let pairsArray = response.data.idNamePairs;\n                storeReducer({\n                    type: GlobalStoreActionType.LOAD_ID_NAME_PAIRS,\n                    payload: pairsArray\n                });\n            }\n            else {\n                console.log(\"API FAILED TO GET THE LIST PAIRS\");\n            }\n        }\n        asyncLoadIdNamePairs();\n    }\n\n    store.setCurrentList = function (id) {\n        async function asyncSetCurrentList(id) {\n            let response = await api.getPlaylistById(id);\n            if (response.data.success) {\n                let playlist = response.data.playlist;\n\n                if (response.data.success) {\n                    storeReducer({\n                        type: GlobalStoreActionType.SET_CURRENT_LIST,\n                        payload: playlist\n                    });\n                    store.history.push(\"/playlist/\" + playlist._id);\n                }\n\n            }\n        }\n        asyncSetCurrentList(id);\n    }\n\n    store.updateCurrentList = function() {\n        async function asyncUpdateCurrentList() {\n            let response = await api.updatePlaylistById(store.currentList._id, store.currentList);\n            if (response.data.success) {\n                storeReducer({\n                    type: GlobalStoreActionType.SET_CURRENT_LIST,\n                    payload: store.currentList\n                });\n            }\n        }\n        asyncUpdateCurrentList();\n    }\n\n    store.getPlaylistSize = function() {\n        console.log(\"size of playlist:\" + store.currentList.songs.length);\n        return store.currentList.songs.length;\n    }\n    \n    // 1. inititate adding to the transaction stack\n    store.addNewSong = function () {\n        let index = store.getPlaylistSize();\n        store.addCreateSongTrans(index, \"Untitled\", \"Unknown\", \"dQw4w9WgXcQ\");\n    }\n\n    // 2. adds to transaction stack\n    store.addCreateSongTrans = function(index, title, artist, youTubeId) {\n        let song = {\n            title: title,\n            artist: artist,\n            youTubeId: youTubeId\n        };\n        let transaction = new CreateSong_Transaction(this, index, song);\n        tps.addTransaction(transaction);\n    }\n\n    // 3. actually creates the song and store in backend\n    store.createSong = function(index, song) {\n        store.currentList.songs[index] = song;\n        store.updateCurrentList();\n    }\n\n    store.removeSong = function(index) {\n        let songArr = store.currentList.songs;\n        song\n    }\n\n    store.addRemoveSongTrans = function(index) {\n\n    }\n\n    store.undo = function () {\n        tps.undoTransaction();\n    }\n    store.redo = function () {\n        tps.doTransaction();\n    }\n\n    // THIS FUNCTION ENABLES THE PROCESS OF EDITING A LIST NAME\n    store.setlistNameActive = function () {\n        storeReducer({\n            type: GlobalStoreActionType.SET_LIST_NAME_EDIT_ACTIVE,\n            payload: null\n        });\n    }\n\n    // THIS GIVES OUR STORE AND ITS REDUCER TO ANY COMPONENT THAT NEEDS IT\n    return { store, storeReducer };\n}"],"mappings":"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"},"metadata":{},"sourceType":"module"}