{"ast":null,"code":"var _s = $RefreshSig$();\nimport { createContext, StrictMode, useState } from 'react';\nimport jsTPS from '../common/jsTPS';\nimport api from '../api';\nimport CreateSong_Transaction from '../transactions/CreateSong_Transaction';\nimport RemoveSong_Transaction from '../transactions/RemoveSong_Transaction';\nimport UpdateSong_Transaction from '../transactions/UpdateSong_Transaction';\nexport const GlobalStoreContext = /*#__PURE__*/createContext({});\n/*\n    This is our global data store. Note that it uses the Flux design pattern,\n    which makes use of things like actions and reducers. \n    \n    @author McKilla Gorilla\n*/\n\n// THESE ARE ALL THE TYPES OF UPDATES TO OUR GLOBAL\n// DATA STORE STATE THAT CAN BE PROCESSED\nexport const GlobalStoreActionType = {\n  CHANGE_LIST_NAME: \"CHANGE_LIST_NAME\",\n  CLOSE_CURRENT_LIST: \"CLOSE_CURRENT_LIST\",\n  CREATE_NEW_LIST: \"CREATE_NEW_LIST\",\n  LOAD_ID_NAME_PAIRS: \"LOAD_ID_NAME_PAIRS\",\n  SET_CURRENT_LIST: \"SET_CURRENT_LIST\",\n  SET_LIST_NAME_EDIT_ACTIVE: \"SET_LIST_NAME_EDIT_ACTIVE\",\n  MARK_LIST_FOR_DELETION: \"MARK_LIST_FOR_DELETION\",\n  MARK_SONG_FOR_REMOVAL: \"MARK_SONG_FOR_REMOVAL\",\n  SET_SONG_EDIT_ACTIVE: \"SET_SONG_EDIT_ACTIVE\",\n  MARK_SONG_FOR_EDIT: \"MARK_SONG_FOR_EDIT\"\n};\n\n// WE'LL NEED THIS TO PROCESS TRANSACTIONS\nconst tps = new jsTPS();\n\n// WITH THIS WE'RE MAKING OUR GLOBAL DATA STORE\n// AVAILABLE TO THE REST OF THE APPLICATION\nexport const useGlobalStore = () => {\n  _s();\n  // THESE ARE ALL THE THINGS OUR DATA STORE WILL MANAGE\n  const [store, setStore] = useState({\n    idNamePairs: [],\n    currentList: null,\n    newListCounter: 0,\n    listNameActive: false,\n    listMarkedForDeletion: null,\n    listNameForDeletion: null,\n    songMarkedForRemoval: null,\n    toRemoveIndex: null,\n    toRemoveTitle: null,\n    editSongActive: false,\n    songMarkedForEditObj: null,\n    songMarkedForEditTitle: null\n  });\n\n  // HERE'S THE DATA STORE'S REDUCER, IT MUST\n  // HANDLE EVERY TYPE OF STATE CHANGE\n  const storeReducer = action => {\n    const {\n      type,\n      payload\n    } = action;\n    switch (type) {\n      // LIST UPDATE OF ITS NAME\n      case GlobalStoreActionType.CHANGE_LIST_NAME:\n        {\n          return setStore({\n            idNamePairs: payload.idNamePairs,\n            currentList: payload.playlist,\n            newListCounter: store.newListCounter,\n            listNameActive: false,\n            listMarkedForDeletion: null,\n            listNameForDeletion: null,\n            songMarkedForRemoval: null,\n            toRemoveIndex: null,\n            editSongActive: false\n          });\n        }\n      // STOP EDITING THE CURRENT LIST\n      case GlobalStoreActionType.CLOSE_CURRENT_LIST:\n        {\n          return setStore({\n            idNamePairs: store.idNamePairs,\n            currentList: null,\n            newListCounter: store.newListCounter,\n            listNameActive: false,\n            listMarkedForDeletion: null,\n            listNameForDeletion: null,\n            songMarkedForRemoval: null,\n            toRemoveIndex: null,\n            editSongActive: false\n          });\n        }\n      // CREATE A NEW LIST\n      case GlobalStoreActionType.CREATE_NEW_LIST:\n        {\n          return setStore({\n            idNamePairs: store.idNamePairs,\n            currentList: payload,\n            newListCounter: store.newListCounter + 1,\n            listNameActive: false,\n            listMarkedForDeletion: null,\n            listNameForDeletion: null,\n            songMarkedForRemoval: null,\n            toRemoveIndex: null,\n            editSongActive: false\n          });\n        }\n      // GET ALL THE LISTS SO WE CAN PRESENT THEM\n      case GlobalStoreActionType.LOAD_ID_NAME_PAIRS:\n        {\n          return setStore({\n            idNamePairs: payload,\n            currentList: null,\n            newListCounter: store.newListCounter,\n            listNameActive: false,\n            listMarkedForDeletion: null,\n            listNameForDeletion: null,\n            songMarkedForRemoval: null,\n            toRemoveIndex: null,\n            editSongActive: false\n          });\n        }\n      // PREPARE TO DELETE A LIST\n      case GlobalStoreActionType.MARK_LIST_FOR_DELETION:\n        {\n          return setStore({\n            idNamePairs: store.idNamePairs,\n            currentList: null,\n            newListCounter: store.newListCounter,\n            listNameActive: false,\n            listMarkedForDeletion: payload.id,\n            listNameForDeletion: payload.name,\n            songMarkedForRemoval: null,\n            toRemoveIndex: null,\n            editSongActive: false\n          });\n        }\n      // PREPARE TO REMOVE A SONG\n      case GlobalStoreActionType.MARK_SONG_FOR_REMOVAL:\n        {\n          return setStore({\n            idNamePairs: store.idNamePairs,\n            currentList: store.currentList,\n            newListCounter: store.newListCounter,\n            listNameActive: false,\n            songMarkedForRemoval: payload.song,\n            listNameForDeletion: null,\n            toRemoveIndex: payload.toRemoveIndex,\n            toRemoveTitle: payload.toRemoveTitle,\n            editSongActive: false\n          });\n        }\n      // PREPARE TO EDIT A SONG\n      case GlobalStoreActionType.MARK_SONG_FOR_EDIT:\n        {\n          return setStore({\n            idNamePairs: store.idNamePairs,\n            currentList: store.currentList,\n            newListCounter: store.newListCounter,\n            listNameActive: false,\n            songMarkedForEditObj: payload.song,\n            songMarkedForEditIndex: payload.index,\n            editSongActive: true\n          });\n        }\n      // UPDATE A LIST\n      case GlobalStoreActionType.SET_CURRENT_LIST:\n        {\n          return setStore({\n            idNamePairs: store.idNamePairs,\n            currentList: payload,\n            newListCounter: store.newListCounter,\n            listNameActive: false,\n            listMarkedForDeletion: null,\n            listNameForDeletion: null,\n            songMarkedForRemoval: null,\n            toRemoveIndex: null,\n            editSongActive: false\n          });\n        }\n      // START EDITING A LIST ITEM\n      case GlobalStoreActionType.SET_SONG_EDIT_ACTIVE:\n        {\n          return setStore({\n            idNamePairs: store.idNamePairs,\n            currentList: store.currentList,\n            newListCounter: store.newListCounter,\n            listNameActive: false,\n            listMarkedForDeletion: null,\n            listNameForDeletion: null,\n            songMarkedForRemoval: null,\n            toRemoveIndex: null,\n            editSongActive: true\n          });\n        }\n\n      // START EDITING A LIST NAME\n      case GlobalStoreActionType.SET_LIST_NAME_EDIT_ACTIVE:\n        {\n          return setStore({\n            idNamePairs: store.idNamePairs,\n            currentList: payload,\n            newListCounter: store.newListCounter,\n            listNameActive: true,\n            listMarkedForDeletion: null,\n            listNameForDeletion: null,\n            songMarkedForRemoval: null,\n            toRemoveIndex: null,\n            editSongActive: false\n          });\n        }\n      default:\n        return store;\n    }\n  };\n  // THESE ARE THE FUNCTIONS THAT WILL UPDATE OUR STORE AND\n  // DRIVE THE STATE OF THE APPLICATION. WE'LL CALL THESE IN \n  // RESPONSE TO EVENTS INSIDE OUR COMPONENTS.\n\n  store.createNewList = function () {\n    async function asyncCreateNewList() {\n      let playlistName = \"Untitled\" + store.newListCounter;\n      let newPlaylistObj = {\n        name: playlistName,\n        song: []\n      };\n      let response = await api.createPlaylist(newPlaylistObj);\n      if (response.data.success) {\n        let newPlaylist = response.data.playlist;\n        storeReducer({\n          type: GlobalStoreActionType.CREATE_NEW_LIST,\n          payload: newPlaylist\n        });\n        store.history.push(\"/playlist/\" + newPlaylist._id);\n      } else {\n        console.log(\"Could not create a new list\");\n      }\n    }\n    asyncCreateNewList();\n  };\n\n  // 1. mark list for deletion (NO DELETION YET)\n  store.markListForDeletion = function (id, playlistName) {\n    storeReducer({\n      type: GlobalStoreActionType.MARK_LIST_FOR_DELETION,\n      payload: {\n        name: playlistName,\n        id: id\n      }\n    });\n    store.showDeleteListModal();\n  };\n\n  // 2. begins process of deleting marked list (NO DELETION YET)\n  store.deleteMarkedList = function () {\n    store.deletePlaylist(store.listMarkedForDeletion);\n    store.hideDeleteListModal();\n  };\n\n  // 3. actually deletes the list\n  store.deletePlaylist = function (id) {\n    async function asyncDeleteList(id) {\n      let response = await api.deletePlaylistById(id);\n      if (response.data.success) {\n        store.loadIdNamePairs();\n        store.history.push(\"/\");\n      } else {\n        console.log(\"No response. Did not delete list\");\n      }\n    }\n    asyncDeleteList(id);\n  };\n  store.showDeleteListModal = function () {\n    let deleteListModal = document.getElementById(\"delete-list-modal\");\n    deleteListModal.classList.add(\"is-visible\");\n  };\n  store.hideDeleteListModal = function () {\n    let deleteListModal = document.getElementById(\"delete-list-modal\");\n    deleteListModal.classList.remove(\"is-visible\");\n  };\n\n  // THIS FUNCTION PROCESSES CHANGING A LIST NAME\n  store.changeListName = function (id, newName) {\n    // GET THE LIST\n    async function asyncChangeListName(id) {\n      let response = await api.getPlaylistById(id);\n      if (response.data.success) {\n        let playlist = response.data.playlist;\n        playlist.name = newName;\n        async function updateList(playlist) {\n          response = await api.updatePlaylistById(playlist._id, playlist);\n          if (response.data.success) {\n            async function getListPairs(playlist) {\n              response = await api.getPlaylistPairs();\n              if (response.data.success) {\n                let pairsArray = response.data.idNamePairs;\n                storeReducer({\n                  type: GlobalStoreActionType.CHANGE_LIST_NAME,\n                  payload: {\n                    idNamePairs: pairsArray,\n                    playlist: playlist\n                  }\n                });\n              }\n            }\n            getListPairs(playlist);\n          }\n        }\n        updateList(playlist);\n      }\n    }\n    asyncChangeListName(id);\n  };\n\n  // THIS FUNCTION PROCESSES CLOSING THE CURRENTLY LOADED LIST\n  store.closeCurrentList = function () {\n    storeReducer({\n      type: GlobalStoreActionType.CLOSE_CURRENT_LIST,\n      payload: {}\n    });\n  };\n\n  // THIS FUNCTION LOADS ALL THE ID, NAME PAIRS SO WE CAN LIST ALL THE LISTS\n  store.loadIdNamePairs = function () {\n    async function asyncLoadIdNamePairs() {\n      const response = await api.getPlaylistPairs();\n      if (response.data.success) {\n        let pairsArray = response.data.idNamePairs;\n        storeReducer({\n          type: GlobalStoreActionType.LOAD_ID_NAME_PAIRS,\n          payload: pairsArray\n        });\n      } else {\n        console.log(\"API FAILED TO GET THE LIST PAIRS\");\n      }\n    }\n    asyncLoadIdNamePairs();\n  };\n  store.setCurrentList = function (id) {\n    async function asyncSetCurrentList(id) {\n      let response = await api.getPlaylistById(id);\n      if (response.data.success) {\n        let playlist = response.data.playlist;\n        if (response.data.success) {\n          storeReducer({\n            type: GlobalStoreActionType.SET_CURRENT_LIST,\n            payload: playlist\n          });\n          store.history.push(\"/playlist/\" + playlist._id);\n        }\n      }\n    }\n    asyncSetCurrentList(id);\n  };\n  store.updateCurrentList = function () {\n    async function asyncUpdateCurrentList() {\n      let response = await api.updatePlaylistById(store.currentList._id, store.currentList);\n      if (response.data.success) {\n        storeReducer({\n          type: GlobalStoreActionType.SET_CURRENT_LIST,\n          payload: store.currentList\n        });\n      } else {\n        console.log(\"Response unsuccessful\");\n      }\n    }\n    asyncUpdateCurrentList();\n  };\n  store.getPlaylistSize = function () {\n    console.log(\"size of playlist:\" + (store.currentList.songs.length + 1));\n    return store.currentList.songs.length;\n  };\n\n  // 1. inititate adding to the transaction stack\n  store.addNewSong = function () {\n    let index = store.getPlaylistSize();\n    store.addCreateSongTrans(index, \"Untitled\", \"Unknown\", \"dQw4w9WgXcQ\");\n  };\n\n  // 2. adds to transaction stack\n  store.addCreateSongTrans = function (index, title, artist, youTubeId) {\n    let song = {\n      title: title,\n      artist: artist,\n      youTubeId: youTubeId\n    };\n    let transaction = new CreateSong_Transaction(this, index, song);\n    tps.addTransaction(transaction);\n  };\n\n  // 3. actually creates the song and store in backend\n  store.createSong = function (index, song) {\n    store.currentList.songs[index] = song;\n    store.updateCurrentList();\n  };\n\n  // 1. initiates editing song\n  store.markSongForEdit = function (song, index) {\n    storeReducer({\n      type: GlobalStoreActionType.MARK_SONG_FOR_EDIT,\n      payload: {\n        song: song,\n        index: index\n      }\n    });\n    store.showEditSongModal();\n  };\n  store.updateSong = function (index, newSong) {\n    store.currentList.songs[index] = newSong;\n    store.updateCurrentList();\n  };\n  store.addUpdateSongTrans = function (index, newSong) {\n    let oldSong = store.currentList.songs[index];\n    let transaction = new UpdateSong_Transaction(store, index, oldSong, newSong);\n    tps.addTransaction(transaction);\n  };\n  store.showEditSongModal = function () {\n    let editSongModal = document.getElementById(\"edit-song-modal\");\n    editSongModal.classList.add(\"is-visible\");\n  };\n  store.hideEditSongModal = function () {\n    let editSongModal = document.getElementById(\"edit-song-modal\");\n    editSongModal.classList.remove(\"is-visible\");\n  };\n\n  // 1. initiates removing song\n  store.markSongForRemoval = function (songName, song, index) {\n    storeReducer({\n      type: GlobalStoreActionType.MARK_SONG_FOR_REMOVAL,\n      payload: {\n        toRemoveIndex: index,\n        song: song,\n        toRemoveTitle: songName\n      }\n    });\n    store.showRemoveSongModal();\n  };\n\n  // 2. add op to transaction\n  store.addRemoveSongTrans = function (song, index) {\n    let transaction = new RemoveSong_Transaction(this, index, song);\n    tps.addTransaction(transaction);\n    store.hideRemoveSongModal();\n  };\n\n  // 3. actually removes the song and update in backend\n  store.removeSong = function (index) {\n    let songArr = store.currentList.songs;\n    songArr.splice(index, 1);\n    store.updateCurrentList();\n  };\n\n  // store.removeMarkedSong = function () {\n  //     store.removeSong(store.toRemoveIndex);\n  //     store.hideRemoveSongModal();\n  // }\n\n  store.showRemoveSongModal = function () {\n    let removeSongModal = document.getElementById(\"remove-song-modal\");\n    removeSongModal.classList.add(\"is-visible\");\n  };\n  store.hideRemoveSongModal = function () {\n    let removeSongModal = document.getElementById(\"remove-song-modal\");\n    removeSongModal.classList.remove(\"is-visible\");\n  };\n  store.undo = function () {\n    tps.undoTransaction();\n  };\n  store.redo = function () {\n    tps.doTransaction();\n  };\n\n  // THIS FUNCTION ENABLES THE PROCESS OF EDITING A LIST NAME\n  store.setlistNameActive = function () {\n    storeReducer({\n      type: GlobalStoreActionType.SET_LIST_NAME_EDIT_ACTIVE,\n      payload: null\n    });\n  };\n\n  // THIS FUNCTION ENABLES THE PROCESS OF EDITING A SONG OBJ\n  store.setEditSongActive = function () {\n    storeReducer({\n      type: GlobalStoreActionType.SET_SONG_EDIT_ACTIVE,\n      payload: null\n    });\n  };\n\n  // THIS GIVES OUR STORE AND ITS REDUCER TO ANY COMPONENT THAT NEEDS IT\n  return {\n    store,\n    storeReducer\n  };\n};\n_s(useGlobalStore, \"WWFdH2bZuXRXxlA+dVn9/TBdLwc=\");","map":{"version":3,"names":["createContext","StrictMode","useState","jsTPS","api","CreateSong_Transaction","RemoveSong_Transaction","UpdateSong_Transaction","GlobalStoreContext","GlobalStoreActionType","CHANGE_LIST_NAME","CLOSE_CURRENT_LIST","CREATE_NEW_LIST","LOAD_ID_NAME_PAIRS","SET_CURRENT_LIST","SET_LIST_NAME_EDIT_ACTIVE","MARK_LIST_FOR_DELETION","MARK_SONG_FOR_REMOVAL","SET_SONG_EDIT_ACTIVE","MARK_SONG_FOR_EDIT","tps","useGlobalStore","store","setStore","idNamePairs","currentList","newListCounter","listNameActive","listMarkedForDeletion","listNameForDeletion","songMarkedForRemoval","toRemoveIndex","toRemoveTitle","editSongActive","songMarkedForEditObj","songMarkedForEditTitle","storeReducer","action","type","payload","playlist","id","name","song","songMarkedForEditIndex","index","createNewList","asyncCreateNewList","playlistName","newPlaylistObj","response","createPlaylist","data","success","newPlaylist","history","push","_id","console","log","markListForDeletion","showDeleteListModal","deleteMarkedList","deletePlaylist","hideDeleteListModal","asyncDeleteList","deletePlaylistById","loadIdNamePairs","deleteListModal","document","getElementById","classList","add","remove","changeListName","newName","asyncChangeListName","getPlaylistById","updateList","updatePlaylistById","getListPairs","getPlaylistPairs","pairsArray","closeCurrentList","asyncLoadIdNamePairs","setCurrentList","asyncSetCurrentList","updateCurrentList","asyncUpdateCurrentList","getPlaylistSize","songs","length","addNewSong","addCreateSongTrans","title","artist","youTubeId","transaction","addTransaction","createSong","markSongForEdit","showEditSongModal","updateSong","newSong","addUpdateSongTrans","oldSong","editSongModal","hideEditSongModal","markSongForRemoval","songName","showRemoveSongModal","addRemoveSongTrans","hideRemoveSongModal","removeSong","songArr","splice","removeSongModal","undo","undoTransaction","redo","doTransaction","setlistNameActive","setEditSongActive"],"sources":["/Users/chantelngoh/CSE316/Playlister_HW3/client/src/store/index.js"],"sourcesContent":["import { createContext, StrictMode, useState } from 'react'\nimport jsTPS from '../common/jsTPS'\nimport api from '../api'\nimport CreateSong_Transaction from '../transactions/CreateSong_Transaction';\nimport RemoveSong_Transaction from '../transactions/RemoveSong_Transaction';\nimport UpdateSong_Transaction from '../transactions/UpdateSong_Transaction';\nexport const GlobalStoreContext = createContext({});\n/*\n    This is our global data store. Note that it uses the Flux design pattern,\n    which makes use of things like actions and reducers. \n    \n    @author McKilla Gorilla\n*/\n\n// THESE ARE ALL THE TYPES OF UPDATES TO OUR GLOBAL\n// DATA STORE STATE THAT CAN BE PROCESSED\nexport const GlobalStoreActionType = {\n    CHANGE_LIST_NAME: \"CHANGE_LIST_NAME\",\n    CLOSE_CURRENT_LIST: \"CLOSE_CURRENT_LIST\",\n    CREATE_NEW_LIST: \"CREATE_NEW_LIST\",\n    LOAD_ID_NAME_PAIRS: \"LOAD_ID_NAME_PAIRS\",\n    SET_CURRENT_LIST: \"SET_CURRENT_LIST\",\n    SET_LIST_NAME_EDIT_ACTIVE: \"SET_LIST_NAME_EDIT_ACTIVE\",\n    MARK_LIST_FOR_DELETION: \"MARK_LIST_FOR_DELETION\",\n    MARK_SONG_FOR_REMOVAL: \"MARK_SONG_FOR_REMOVAL\",\n    SET_SONG_EDIT_ACTIVE: \"SET_SONG_EDIT_ACTIVE\",\n    MARK_SONG_FOR_EDIT: \"MARK_SONG_FOR_EDIT\"\n}\n\n// WE'LL NEED THIS TO PROCESS TRANSACTIONS\nconst tps = new jsTPS();\n\n// WITH THIS WE'RE MAKING OUR GLOBAL DATA STORE\n// AVAILABLE TO THE REST OF THE APPLICATION\nexport const useGlobalStore = () => {\n    // THESE ARE ALL THE THINGS OUR DATA STORE WILL MANAGE\n    const [store, setStore] = useState({\n        idNamePairs: [],\n        currentList: null,\n        newListCounter: 0,\n        listNameActive: false,\n        listMarkedForDeletion: null,\n        listNameForDeletion: null,\n        songMarkedForRemoval: null,\n        toRemoveIndex: null,\n        toRemoveTitle: null,\n        editSongActive: false,\n        songMarkedForEditObj: null,\n        songMarkedForEditTitle: null,\n    });\n\n    // HERE'S THE DATA STORE'S REDUCER, IT MUST\n    // HANDLE EVERY TYPE OF STATE CHANGE\n    const storeReducer = (action) => {\n        const { type, payload } = action;\n        switch (type) {\n            // LIST UPDATE OF ITS NAME\n            case GlobalStoreActionType.CHANGE_LIST_NAME: {\n                return setStore({\n                    idNamePairs: payload.idNamePairs,\n                    currentList: payload.playlist,\n                    newListCounter: store.newListCounter,\n                    listNameActive: false,\n                    listMarkedForDeletion: null,\n                    listNameForDeletion: null,\n                    songMarkedForRemoval: null,\n                    toRemoveIndex: null,\n                    editSongActive: false\n                });\n            }\n            // STOP EDITING THE CURRENT LIST\n            case GlobalStoreActionType.CLOSE_CURRENT_LIST: {\n                return setStore({\n                    idNamePairs: store.idNamePairs,\n                    currentList: null,\n                    newListCounter: store.newListCounter,\n                    listNameActive: false,\n                    listMarkedForDeletion: null,\n                    listNameForDeletion: null,\n                    songMarkedForRemoval: null,\n                    toRemoveIndex: null,\n                    editSongActive: false\n                })\n            }\n            // CREATE A NEW LIST\n            case GlobalStoreActionType.CREATE_NEW_LIST: {\n                return setStore({\n                    idNamePairs: store.idNamePairs,\n                    currentList: payload,\n                    newListCounter: store.newListCounter + 1,\n                    listNameActive: false,\n                    listMarkedForDeletion: null,\n                    listNameForDeletion: null,\n                    songMarkedForRemoval: null,\n                    toRemoveIndex: null,\n                    editSongActive: false\n                })\n            }\n            // GET ALL THE LISTS SO WE CAN PRESENT THEM\n            case GlobalStoreActionType.LOAD_ID_NAME_PAIRS: {\n                return setStore({\n                    idNamePairs: payload,\n                    currentList: null,\n                    newListCounter: store.newListCounter,\n                    listNameActive: false,\n                    listMarkedForDeletion: null,\n                    listNameForDeletion: null,\n                    songMarkedForRemoval: null,\n                    toRemoveIndex: null,\n                    editSongActive: false\n                });\n            }\n            // PREPARE TO DELETE A LIST\n            case GlobalStoreActionType.MARK_LIST_FOR_DELETION: {\n                return setStore({\n                    idNamePairs: store.idNamePairs,\n                    currentList: null,\n                    newListCounter: store.newListCounter,\n                    listNameActive: false,\n                    listMarkedForDeletion: payload.id,\n                    listNameForDeletion: payload.name,\n                    songMarkedForRemoval: null,\n                    toRemoveIndex: null,\n                    editSongActive: false\n                });\n            }\n            // PREPARE TO REMOVE A SONG\n            case GlobalStoreActionType.MARK_SONG_FOR_REMOVAL: {\n                return setStore({\n                    idNamePairs: store.idNamePairs,\n                    currentList: store.currentList,\n                    newListCounter: store.newListCounter,\n                    listNameActive: false,\n                    songMarkedForRemoval: payload.song,\n                    listNameForDeletion: null,\n                    toRemoveIndex: payload.toRemoveIndex,\n                    toRemoveTitle: payload.toRemoveTitle,\n                    editSongActive: false\n                });\n            }\n            // PREPARE TO EDIT A SONG\n            case GlobalStoreActionType.MARK_SONG_FOR_EDIT: {\n                return setStore({\n                    idNamePairs: store.idNamePairs,\n                    currentList: store.currentList,\n                    newListCounter: store.newListCounter,\n                    listNameActive: false,\n                    songMarkedForEditObj: payload.song,\n                    songMarkedForEditIndex: payload.index,\n                    editSongActive: true,\n                });\n            }\n            // UPDATE A LIST\n            case GlobalStoreActionType.SET_CURRENT_LIST: {\n                return setStore({\n                    idNamePairs: store.idNamePairs,\n                    currentList: payload,\n                    newListCounter: store.newListCounter,\n                    listNameActive: false,\n                    listMarkedForDeletion: null,\n                    listNameForDeletion: null,\n                    songMarkedForRemoval: null,\n                    toRemoveIndex: null,\n                    editSongActive: false\n                });\n            }\n            // START EDITING A LIST ITEM\n            case GlobalStoreActionType.SET_SONG_EDIT_ACTIVE: {\n                return setStore({\n                    idNamePairs: store.idNamePairs,\n                    currentList: store.currentList,\n                    newListCounter: store.newListCounter,\n                    listNameActive: false,\n                    listMarkedForDeletion: null,\n                    listNameForDeletion: null,\n                    songMarkedForRemoval: null,\n                    toRemoveIndex: null,\n                    editSongActive: true\n                })\n            }\n\n\n            // START EDITING A LIST NAME\n            case GlobalStoreActionType.SET_LIST_NAME_EDIT_ACTIVE: {\n                return setStore({\n                    idNamePairs: store.idNamePairs,\n                    currentList: payload,\n                    newListCounter: store.newListCounter,\n                    listNameActive: true,\n                    listMarkedForDeletion: null,\n                    listNameForDeletion: null,\n                    songMarkedForRemoval: null,\n                    toRemoveIndex: null,\n                    editSongActive: false\n                });\n            }\n            default:\n                return store;\n        }\n    }\n    // THESE ARE THE FUNCTIONS THAT WILL UPDATE OUR STORE AND\n    // DRIVE THE STATE OF THE APPLICATION. WE'LL CALL THESE IN \n    // RESPONSE TO EVENTS INSIDE OUR COMPONENTS.\n\n    store.createNewList = function () {\n        async function asyncCreateNewList() {\n            let playlistName = \"Untitled\" + store.newListCounter;\n            let newPlaylistObj = {name : playlistName, song : []};\n            let response = await api.createPlaylist(newPlaylistObj);\n\n            if (response.data.success) {\n                let newPlaylist = response.data.playlist;\n                storeReducer({ \n                    type: GlobalStoreActionType.CREATE_NEW_LIST,\n                    payload: newPlaylist\n                });\n                store.history.push(\"/playlist/\" + newPlaylist._id);\n            } else {\n                console.log(\"Could not create a new list\")\n            }\n        }\n        asyncCreateNewList();\n    }\n\n    // 1. mark list for deletion (NO DELETION YET)\n    store.markListForDeletion = function (id, playlistName) {\n        storeReducer({\n            type: GlobalStoreActionType.MARK_LIST_FOR_DELETION,\n            payload: {\n                name: playlistName,\n                id: id\n            }\n        });\n        store.showDeleteListModal();\n    }\n\n    // 2. begins process of deleting marked list (NO DELETION YET)\n    store.deleteMarkedList = function() {\n        store.deletePlaylist(store.listMarkedForDeletion);\n        store.hideDeleteListModal();\n    }\n\n    // 3. actually deletes the list\n    store.deletePlaylist = function (id) {\n        async function asyncDeleteList(id) {\n            let response = await api.deletePlaylistById(id);\n            \n            if (response.data.success) {\n                store.loadIdNamePairs();\n                store.history.push(\"/\");\n            } else {\n                console.log(\"No response. Did not delete list\")\n            }\n        }\n        asyncDeleteList(id);\n    }\n\n    store.showDeleteListModal = function () {\n        let deleteListModal = document.getElementById(\"delete-list-modal\");\n        deleteListModal.classList.add(\"is-visible\");\n    }\n\n    store.hideDeleteListModal = function() {\n        let deleteListModal = document.getElementById(\"delete-list-modal\");\n        deleteListModal.classList.remove(\"is-visible\");\n    }\n\n    // THIS FUNCTION PROCESSES CHANGING A LIST NAME\n    store.changeListName = function (id, newName) {\n        // GET THE LIST\n        async function asyncChangeListName(id) {\n            let response = await api.getPlaylistById(id);\n            if (response.data.success) {\n                let playlist = response.data.playlist;\n                playlist.name = newName;\n                async function updateList(playlist) {\n                    response = await api.updatePlaylistById(playlist._id, playlist);\n                    if (response.data.success) {\n                        async function getListPairs(playlist) {\n                            response = await api.getPlaylistPairs();\n                            if (response.data.success) {\n                                let pairsArray = response.data.idNamePairs;\n                                storeReducer({\n                                    type: GlobalStoreActionType.CHANGE_LIST_NAME,\n                                    payload: {\n                                        idNamePairs: pairsArray,\n                                        playlist: playlist\n                                    }\n                                });\n                            }\n                        }\n                        getListPairs(playlist);\n                    }\n                }\n                updateList(playlist);\n            }\n        }\n        asyncChangeListName(id);\n    }\n\n    // THIS FUNCTION PROCESSES CLOSING THE CURRENTLY LOADED LIST\n    store.closeCurrentList = function () {\n        storeReducer({\n            type: GlobalStoreActionType.CLOSE_CURRENT_LIST,\n            payload: {}\n        });\n    }\n\n    // THIS FUNCTION LOADS ALL THE ID, NAME PAIRS SO WE CAN LIST ALL THE LISTS\n    store.loadIdNamePairs = function () {\n        async function asyncLoadIdNamePairs() {\n            const response = await api.getPlaylistPairs();\n            if (response.data.success) {\n                let pairsArray = response.data.idNamePairs;\n                storeReducer({\n                    type: GlobalStoreActionType.LOAD_ID_NAME_PAIRS,\n                    payload: pairsArray\n                });\n            }\n            else {\n                console.log(\"API FAILED TO GET THE LIST PAIRS\");\n            }\n        }\n        asyncLoadIdNamePairs();\n    }\n\n    store.setCurrentList = function (id) {\n        async function asyncSetCurrentList(id) {\n            let response = await api.getPlaylistById(id);\n            if (response.data.success) {\n                let playlist = response.data.playlist;\n\n                if (response.data.success) {\n                    storeReducer({\n                        type: GlobalStoreActionType.SET_CURRENT_LIST,\n                        payload: playlist\n                    });\n                    store.history.push(\"/playlist/\" + playlist._id);\n                }\n\n            }\n        }\n        asyncSetCurrentList(id);\n    }\n\n    store.updateCurrentList = function() {\n        async function asyncUpdateCurrentList() {\n            let response = await api.updatePlaylistById(store.currentList._id, store.currentList);\n            if (response.data.success) {\n                storeReducer({\n                    type: GlobalStoreActionType.SET_CURRENT_LIST,\n                    payload: store.currentList\n                });\n            } else {\n                console.log(\"Response unsuccessful\");\n            }\n        }\n        asyncUpdateCurrentList();\n    }\n\n    store.getPlaylistSize = function() {\n        console.log(\"size of playlist:\" + (store.currentList.songs.length+1));\n        return store.currentList.songs.length;\n    }\n\n    // 1. inititate adding to the transaction stack\n    store.addNewSong = function () {\n        let index = store.getPlaylistSize();\n        store.addCreateSongTrans(index, \"Untitled\", \"Unknown\", \"dQw4w9WgXcQ\");\n    }\n\n    // 2. adds to transaction stack\n    store.addCreateSongTrans = function(index, title, artist, youTubeId) {\n        let song = {\n            title: title,\n            artist: artist,\n            youTubeId: youTubeId\n        };\n        let transaction = new CreateSong_Transaction(this, index, song);\n        tps.addTransaction(transaction);\n    }\n\n    // 3. actually creates the song and store in backend\n    store.createSong = function(index, song) {\n        store.currentList.songs[index] = song;\n        store.updateCurrentList();\n    }\n\n    // 1. initiates editing song\n    store.markSongForEdit = function(song, index) {\n        storeReducer({\n            type: GlobalStoreActionType.MARK_SONG_FOR_EDIT,\n            payload: {\n                song: song,\n                index: index\n            }\n        });\n        store.showEditSongModal();\n    }\n\n\n    \n    store.updateSong = function(index, newSong) {\n        store.currentList.songs[index] = newSong;\n        store.updateCurrentList();\n    }\n\n    store.addUpdateSongTrans = function (index, newSong) {\n        let oldSong = store.currentList.songs[index];\n        let transaction = new UpdateSong_Transaction(store, index, oldSong, newSong);\n        tps.addTransaction(transaction);\n    }\n\n    store.showEditSongModal = function () {\n        let editSongModal = document.getElementById(\"edit-song-modal\");\n        editSongModal.classList.add(\"is-visible\");\n    }\n\n    store.hideEditSongModal = function() {\n        let editSongModal = document.getElementById(\"edit-song-modal\");\n        editSongModal.classList.remove(\"is-visible\");\n    }\n\n    // 1. initiates removing song\n    store.markSongForRemoval = function(songName, song, index) {\n        storeReducer({\n            type: GlobalStoreActionType.MARK_SONG_FOR_REMOVAL,\n            payload: {\n                toRemoveIndex: index,\n                song: song,\n                toRemoveTitle: songName\n            }\n        });\n        store.showRemoveSongModal();\n    }\n\n    // 2. add op to transaction\n    store.addRemoveSongTrans = function(song, index) {\n        let transaction = new RemoveSong_Transaction(this, index, song);\n        tps.addTransaction(transaction);\n        store.hideRemoveSongModal();\n    }\n\n    // 3. actually removes the song and update in backend\n    store.removeSong = function(index) {\n        let songArr = store.currentList.songs;\n        songArr.splice(index,1);\n        store.updateCurrentList();\n    }\n\n    // store.removeMarkedSong = function () {\n    //     store.removeSong(store.toRemoveIndex);\n    //     store.hideRemoveSongModal();\n    // }\n\n    store.showRemoveSongModal = function () {\n        let removeSongModal = document.getElementById(\"remove-song-modal\");\n        removeSongModal.classList.add(\"is-visible\");\n    }\n\n    store.hideRemoveSongModal = function() {\n        let removeSongModal = document.getElementById(\"remove-song-modal\");\n        removeSongModal.classList.remove(\"is-visible\");\n    }\n\n    store.undo = function () {\n        tps.undoTransaction();\n    }\n    store.redo = function () {\n        tps.doTransaction();\n    }\n\n    // THIS FUNCTION ENABLES THE PROCESS OF EDITING A LIST NAME\n    store.setlistNameActive = function () {\n        storeReducer({\n            type: GlobalStoreActionType.SET_LIST_NAME_EDIT_ACTIVE,\n            payload: null\n        });\n    }\n\n    // THIS FUNCTION ENABLES THE PROCESS OF EDITING A SONG OBJ\n    store.setEditSongActive = function () {\n        storeReducer({\n            type: GlobalStoreActionType.SET_SONG_EDIT_ACTIVE,\n            payload: null\n        });\n    }\n\n    // THIS GIVES OUR STORE AND ITS REDUCER TO ANY COMPONENT THAT NEEDS IT\n    return { store, storeReducer };\n}"],"mappings":"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"},"metadata":{},"sourceType":"module"}