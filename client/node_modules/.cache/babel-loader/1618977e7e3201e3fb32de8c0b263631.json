{"ast":null,"code":"var _s = $RefreshSig$();\nimport { createContext, useState } from 'react';\nimport jsTPS from '../common/jsTPS';\nimport api from '../api';\nexport const GlobalStoreContext = /*#__PURE__*/createContext({});\n/*\n    This is our global data store. Note that it uses the Flux design pattern,\n    which makes use of things like actions and reducers. \n    \n    @author McKilla Gorilla\n*/\n\n// THESE ARE ALL THE TYPES OF UPDATES TO OUR GLOBAL\n// DATA STORE STATE THAT CAN BE PROCESSED\nexport const GlobalStoreActionType = {\n  CHANGE_LIST_NAME: \"CHANGE_LIST_NAME\",\n  CLOSE_CURRENT_LIST: \"CLOSE_CURRENT_LIST\",\n  CREATE_NEW_LIST: \"CREATE_NEW_LIST\",\n  LOAD_ID_NAME_PAIRS: \"LOAD_ID_NAME_PAIRS\",\n  SET_CURRENT_LIST: \"SET_CURRENT_LIST\",\n  SET_LIST_NAME_EDIT_ACTIVE: \"SET_LIST_NAME_EDIT_ACTIVE\"\n};\n\n// WE'LL NEED THIS TO PROCESS TRANSACTIONS\nconst tps = new jsTPS();\n\n// WITH THIS WE'RE MAKING OUR GLOBAL DATA STORE\n// AVAILABLE TO THE REST OF THE APPLICATION\nexport const useGlobalStore = () => {\n  _s();\n  // THESE ARE ALL THE THINGS OUR DATA STORE WILL MANAGE\n  const [store, setStore] = useState({\n    idNamePairs: [],\n    currentList: null,\n    newListCounter: 0,\n    listNameActive: false\n  });\n\n  // HERE'S THE DATA STORE'S REDUCER, IT MUST\n  // HANDLE EVERY TYPE OF STATE CHANGE\n  const storeReducer = action => {\n    const {\n      type,\n      payload\n    } = action;\n    switch (type) {\n      // LIST UPDATE OF ITS NAME\n      case GlobalStoreActionType.CHANGE_LIST_NAME:\n        {\n          return setStore({\n            idNamePairs: payload.idNamePairs,\n            currentList: payload.playlist,\n            newListCounter: store.newListCounter,\n            listNameActive: false\n          });\n        }\n      // STOP EDITING THE CURRENT LIST\n      case GlobalStoreActionType.CLOSE_CURRENT_LIST:\n        {\n          return setStore({\n            idNamePairs: store.idNamePairs,\n            currentList: null,\n            newListCounter: store.newListCounter,\n            listNameActive: false\n          });\n        }\n      // CREATE A NEW LIST\n      case GlobalStoreActionType.CREATE_NEW_LIST:\n        {\n          return setStore({\n            idNamePairs: store.idNamePairs,\n            currentList: payload,\n            newListCounter: store.newListCounter + 1,\n            listNameActive: false\n          });\n        }\n      // GET ALL THE LISTS SO WE CAN PRESENT THEM\n      case GlobalStoreActionType.LOAD_ID_NAME_PAIRS:\n        {\n          return setStore({\n            idNamePairs: payload,\n            currentList: null,\n            newListCounter: store.newListCounter,\n            listNameActive: false\n          });\n        }\n      // PREPARE TO DELETE A LIST\n      case GlobalStoreActionType.MARK_LIST_FOR_DELETION:\n        {\n          return setStore({\n            idNamePairs: store.idNamePairs,\n            currentList: null,\n            newListCounter: store.newListCounter,\n            listNameActive: false\n          });\n        }\n      // UPDATE A LIST\n      case GlobalStoreActionType.SET_CURRENT_LIST:\n        {\n          return setStore({\n            idNamePairs: store.idNamePairs,\n            currentList: payload,\n            newListCounter: store.newListCounter,\n            listNameActive: false\n          });\n        }\n      // START EDITING A LIST NAME\n      case GlobalStoreActionType.SET_LIST_NAME_EDIT_ACTIVE:\n        {\n          return setStore({\n            idNamePairs: store.idNamePairs,\n            currentList: payload,\n            newListCounter: store.newListCounter,\n            listNameActive: true\n          });\n        }\n      default:\n        return store;\n    }\n  };\n  // THESE ARE THE FUNCTIONS THAT WILL UPDATE OUR STORE AND\n  // DRIVE THE STATE OF THE APPLICATION. WE'LL CALL THESE IN \n  // RESPONSE TO EVENTS INSIDE OUR COMPONENTS.\n\n  store.createNewList = function (playlist) {\n    async function asyncCreateNewList() {\n      let playlistName = \"Untitled\" + store.newListCounter;\n      let newPlaylistObj = {\n        name: playlistName,\n        song: []\n      };\n      let response = await api.createNewList(newPlaylistObj);\n      if (response.data.success) {\n        let playlist = response.data.playlist;\n        storeReducer({\n          type: GlobalStoreActionType.CREATE_NEW_LIST,\n          payload: playlist\n        });\n        store.history.push(\"/playlist/\" + playlist._id);\n        console.log(\"success brozo\");\n      } else {\n        console.log(\"Could not create a new list\");\n      }\n    }\n    asyncCreateNewList();\n  };\n\n  // THIS FUNCTION PROCESSES CHANGING A LIST NAME\n  store.changeListName = function (id, newName) {\n    // GET THE LIST\n    async function asyncChangeListName(id) {\n      let response = await api.getPlaylistById(id);\n      if (response.data.success) {\n        let playlist = response.data.playlist;\n        playlist.name = newName;\n        async function updateList(playlist) {\n          response = await api.updatePlaylistById(playlist._id, playlist);\n          if (response.data.success) {\n            async function getListPairs(playlist) {\n              response = await api.getPlaylistPairs();\n              if (response.data.success) {\n                let pairsArray = response.data.idNamePairs;\n                storeReducer({\n                  type: GlobalStoreActionType.CHANGE_LIST_NAME,\n                  payload: {\n                    idNamePairs: pairsArray,\n                    playlist: playlist\n                  }\n                });\n              }\n            }\n            getListPairs(playlist);\n          }\n        }\n        updateList(playlist);\n      }\n    }\n    asyncChangeListName(id);\n  };\n\n  // THIS FUNCTION PROCESSES CLOSING THE CURRENTLY LOADED LIST\n  store.closeCurrentList = function () {\n    storeReducer({\n      type: GlobalStoreActionType.CLOSE_CURRENT_LIST,\n      payload: {}\n    });\n  };\n\n  // THIS FUNCTION LOADS ALL THE ID, NAME PAIRS SO WE CAN LIST ALL THE LISTS\n  store.loadIdNamePairs = function () {\n    async function asyncLoadIdNamePairs() {\n      const response = await api.getPlaylistPairs();\n      if (response.data.success) {\n        let pairsArray = response.data.idNamePairs;\n        storeReducer({\n          type: GlobalStoreActionType.LOAD_ID_NAME_PAIRS,\n          payload: pairsArray\n        });\n      } else {\n        console.log(\"API FAILED TO GET THE LIST PAIRS\");\n      }\n    }\n    asyncLoadIdNamePairs();\n  };\n  store.setCurrentList = function (id) {\n    async function asyncSetCurrentList(id) {\n      let response = await api.getPlaylistById(id);\n      if (response.data.success) {\n        let playlist = response.data.playlist;\n        if (response.data.success) {\n          storeReducer({\n            type: GlobalStoreActionType.SET_CURRENT_LIST,\n            payload: playlist\n          });\n          store.history.push(\"/playlist/\" + playlist._id);\n        }\n      }\n    }\n    asyncSetCurrentList(id);\n  };\n  store.getPlaylistSize = function () {\n    return store.currentList.songs.length;\n  };\n  store.undo = function () {\n    tps.undoTransaction();\n  };\n  store.redo = function () {\n    tps.doTransaction();\n  };\n\n  // THIS FUNCTION ENABLES THE PROCESS OF EDITING A LIST NAME\n  store.setlistNameActive = function () {\n    storeReducer({\n      type: GlobalStoreActionType.SET_LIST_NAME_EDIT_ACTIVE,\n      payload: null\n    });\n  };\n\n  // THIS GIVES OUR STORE AND ITS REDUCER TO ANY COMPONENT THAT NEEDS IT\n  return {\n    store,\n    storeReducer\n  };\n};\n_s(useGlobalStore, \"5esZRSaCUwjeueF8RbldueI12xo=\");","map":{"version":3,"names":["createContext","useState","jsTPS","api","GlobalStoreContext","GlobalStoreActionType","CHANGE_LIST_NAME","CLOSE_CURRENT_LIST","CREATE_NEW_LIST","LOAD_ID_NAME_PAIRS","SET_CURRENT_LIST","SET_LIST_NAME_EDIT_ACTIVE","tps","useGlobalStore","store","setStore","idNamePairs","currentList","newListCounter","listNameActive","storeReducer","action","type","payload","playlist","MARK_LIST_FOR_DELETION","createNewList","asyncCreateNewList","playlistName","newPlaylistObj","name","song","response","data","success","history","push","_id","console","log","changeListName","id","newName","asyncChangeListName","getPlaylistById","updateList","updatePlaylistById","getListPairs","getPlaylistPairs","pairsArray","closeCurrentList","loadIdNamePairs","asyncLoadIdNamePairs","setCurrentList","asyncSetCurrentList","getPlaylistSize","songs","length","undo","undoTransaction","redo","doTransaction","setlistNameActive"],"sources":["/Users/chantelngoh/CSE316/Playlister_HW3/client/src/store/index.js"],"sourcesContent":["import { createContext, useState } from 'react'\nimport jsTPS from '../common/jsTPS'\nimport api from '../api'\nexport const GlobalStoreContext = createContext({});\n/*\n    This is our global data store. Note that it uses the Flux design pattern,\n    which makes use of things like actions and reducers. \n    \n    @author McKilla Gorilla\n*/\n\n// THESE ARE ALL THE TYPES OF UPDATES TO OUR GLOBAL\n// DATA STORE STATE THAT CAN BE PROCESSED\nexport const GlobalStoreActionType = {\n    CHANGE_LIST_NAME: \"CHANGE_LIST_NAME\",\n    CLOSE_CURRENT_LIST: \"CLOSE_CURRENT_LIST\",\n    CREATE_NEW_LIST: \"CREATE_NEW_LIST\",\n    LOAD_ID_NAME_PAIRS: \"LOAD_ID_NAME_PAIRS\",\n    SET_CURRENT_LIST: \"SET_CURRENT_LIST\",\n    SET_LIST_NAME_EDIT_ACTIVE: \"SET_LIST_NAME_EDIT_ACTIVE\",\n}\n\n// WE'LL NEED THIS TO PROCESS TRANSACTIONS\nconst tps = new jsTPS();\n\n// WITH THIS WE'RE MAKING OUR GLOBAL DATA STORE\n// AVAILABLE TO THE REST OF THE APPLICATION\nexport const useGlobalStore = () => {\n    // THESE ARE ALL THE THINGS OUR DATA STORE WILL MANAGE\n    const [store, setStore] = useState({\n        idNamePairs: [],\n        currentList: null,\n        newListCounter: 0,\n        listNameActive: false\n    });\n\n    // HERE'S THE DATA STORE'S REDUCER, IT MUST\n    // HANDLE EVERY TYPE OF STATE CHANGE\n    const storeReducer = (action) => {\n        const { type, payload } = action;\n        switch (type) {\n            // LIST UPDATE OF ITS NAME\n            case GlobalStoreActionType.CHANGE_LIST_NAME: {\n                return setStore({\n                    idNamePairs: payload.idNamePairs,\n                    currentList: payload.playlist,\n                    newListCounter: store.newListCounter,\n                    listNameActive: false\n                });\n            }\n            // STOP EDITING THE CURRENT LIST\n            case GlobalStoreActionType.CLOSE_CURRENT_LIST: {\n                return setStore({\n                    idNamePairs: store.idNamePairs,\n                    currentList: null,\n                    newListCounter: store.newListCounter,\n                    listNameActive: false\n                })\n            }\n            // CREATE A NEW LIST\n            case GlobalStoreActionType.CREATE_NEW_LIST: {\n                return setStore({\n                    idNamePairs: store.idNamePairs,\n                    currentList: payload,\n                    newListCounter: store.newListCounter + 1,\n                    listNameActive: false\n                })\n            }\n            // GET ALL THE LISTS SO WE CAN PRESENT THEM\n            case GlobalStoreActionType.LOAD_ID_NAME_PAIRS: {\n                return setStore({\n                    idNamePairs: payload,\n                    currentList: null,\n                    newListCounter: store.newListCounter,\n                    listNameActive: false\n                });\n            }\n            // PREPARE TO DELETE A LIST\n            case GlobalStoreActionType.MARK_LIST_FOR_DELETION: {\n                return setStore({\n                    idNamePairs: store.idNamePairs,\n                    currentList: null,\n                    newListCounter: store.newListCounter,\n                    listNameActive: false\n                });\n            }\n            // UPDATE A LIST\n            case GlobalStoreActionType.SET_CURRENT_LIST: {\n                return setStore({\n                    idNamePairs: store.idNamePairs,\n                    currentList: payload,\n                    newListCounter: store.newListCounter,\n                    listNameActive: false\n                });\n            }\n            // START EDITING A LIST NAME\n            case GlobalStoreActionType.SET_LIST_NAME_EDIT_ACTIVE: {\n                return setStore({\n                    idNamePairs: store.idNamePairs,\n                    currentList: payload,\n                    newListCounter: store.newListCounter,\n                    listNameActive: true\n                });\n            }\n            default:\n                return store;\n        }\n    }\n    // THESE ARE THE FUNCTIONS THAT WILL UPDATE OUR STORE AND\n    // DRIVE THE STATE OF THE APPLICATION. WE'LL CALL THESE IN \n    // RESPONSE TO EVENTS INSIDE OUR COMPONENTS.\n\n    store.createNewList = function (playlist) {\n        async function asyncCreateNewList() {\n            let playlistName = \"Untitled\" + store.newListCounter;\n            let newPlaylistObj = {name : playlistName, song : []};\n            let response = await api.createNewList(newPlaylistObj);\n\n            if (response.data.success) {\n                let playlist = response.data.playlist;\n                storeReducer({ \n                    type: GlobalStoreActionType.CREATE_NEW_LIST,\n                    payload: playlist\n                });\n                store.history.push(\"/playlist/\" + playlist._id);\n                console.log(\"success brozo\")\n            } else {\n                console.log(\"Could not create a new list\")\n            }\n        }\n        asyncCreateNewList();\n    }\n\n    // THIS FUNCTION PROCESSES CHANGING A LIST NAME\n    store.changeListName = function (id, newName) {\n        // GET THE LIST\n        async function asyncChangeListName(id) {\n            let response = await api.getPlaylistById(id);\n            if (response.data.success) {\n                let playlist = response.data.playlist;\n                playlist.name = newName;\n                async function updateList(playlist) {\n                    response = await api.updatePlaylistById(playlist._id, playlist);\n                    if (response.data.success) {\n                        async function getListPairs(playlist) {\n                            response = await api.getPlaylistPairs();\n                            if (response.data.success) {\n                                let pairsArray = response.data.idNamePairs;\n                                storeReducer({\n                                    type: GlobalStoreActionType.CHANGE_LIST_NAME,\n                                    payload: {\n                                        idNamePairs: pairsArray,\n                                        playlist: playlist\n                                    }\n                                });\n                            }\n                        }\n                        getListPairs(playlist);\n                    }\n                }\n                updateList(playlist);\n            }\n        }\n        asyncChangeListName(id);\n    }\n\n    // THIS FUNCTION PROCESSES CLOSING THE CURRENTLY LOADED LIST\n    store.closeCurrentList = function () {\n        storeReducer({\n            type: GlobalStoreActionType.CLOSE_CURRENT_LIST,\n            payload: {}\n        });\n    }\n\n    // THIS FUNCTION LOADS ALL THE ID, NAME PAIRS SO WE CAN LIST ALL THE LISTS\n    store.loadIdNamePairs = function () {\n        async function asyncLoadIdNamePairs() {\n            const response = await api.getPlaylistPairs();\n            if (response.data.success) {\n                let pairsArray = response.data.idNamePairs;\n                storeReducer({\n                    type: GlobalStoreActionType.LOAD_ID_NAME_PAIRS,\n                    payload: pairsArray\n                });\n            }\n            else {\n                console.log(\"API FAILED TO GET THE LIST PAIRS\");\n            }\n        }\n        asyncLoadIdNamePairs();\n    }\n\n    store.setCurrentList = function (id) {\n        async function asyncSetCurrentList(id) {\n            let response = await api.getPlaylistById(id);\n            if (response.data.success) {\n                let playlist = response.data.playlist;\n\n                if (response.data.success) {\n                    storeReducer({\n                        type: GlobalStoreActionType.SET_CURRENT_LIST,\n                        payload: playlist\n                    });\n                    store.history.push(\"/playlist/\" + playlist._id);\n                }\n            }\n        }\n        asyncSetCurrentList(id);\n    }\n    store.getPlaylistSize = function() {\n        return store.currentList.songs.length;\n    }\n    store.undo = function () {\n        tps.undoTransaction();\n    }\n    store.redo = function () {\n        tps.doTransaction();\n    }\n\n    // THIS FUNCTION ENABLES THE PROCESS OF EDITING A LIST NAME\n    store.setlistNameActive = function () {\n        storeReducer({\n            type: GlobalStoreActionType.SET_LIST_NAME_EDIT_ACTIVE,\n            payload: null\n        });\n    }\n\n    // THIS GIVES OUR STORE AND ITS REDUCER TO ANY COMPONENT THAT NEEDS IT\n    return { store, storeReducer };\n}"],"mappings":"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"},"metadata":{},"sourceType":"module"}